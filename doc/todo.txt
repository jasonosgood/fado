CODE

Build order: 
	test source SQL, 
	generate wrapper (only part working thus far)
	test wrapper, 
	compare source and generated resultsets
	
Eclipse plugin
Generated code has test method
Generated code has verify schema method
Add runtime "tested" flag to generated code
Add BETWEEN comparison support
Add LIKE comparison support
Add support for date (et al) data type condition parameters
Add null tests to generated accessors for "not null" columns
When column, table, etc not found, suggest alternative
	"column 'appel' not found in table 'fruit', did you mean 'apple'?"
For UPDATEs, is there a strategy for optimistic locking, eg pick the version column?
ID Generators
	Detect identity columns for inserts, updates
Figure out something for transactions 
	maybe nothing, just use JDBC
Better strategy for converting SQL column names into Java variables/accessors
	Capitalizer, or alias list, or...

Different templates for different types of SELECT
   - normal readonly ResultSet, default
   - single column ResultSet eg SELECT Name FROM Person, iterate over values (vs rows)
   - single value ResultSet eg SELECT Count( * ) FROM Person, no iteration
   - updateable ResultSet, probably new interface: eg implements Iterable<Row>

GRAMMARS

Full SQL-92
TransactSQL
unit tests

DOCS

Compare SQL strategies, pros/cons
	string builder
		pros
			low entry point
		cons 
			tough to debug
			tough to test
	API (e.g. Toplink)
	ORM
		cons
			mapping files suck
			JOINs suck
			complicated queries revert to SQL/HQL
			tough to debug
	Fado generator
		pros
			ease of use, typesafe wrappers
			great for read-only, e.g. report engines
			JOINs are easy
			division of labor: 
				DBA role does SQL, API for Java hides SQL
				SQL and Java kept separate
				one-way work flow
			verification at time of code generation
			moves many common errors from runtime to compile time
		cons
			no support for transactions
			
	DAOs
		cons
			hand written