## Fado's SELECT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## date - Fado's timestamp
/**

${className}ResultSet.java   ${date}
  
Generated using Fado's ResultSet.vm template. Original SQL:
    
#foreach( $line in $originalsql )
$line
#end

@see ${originalfile}
  

**/

package ${packageName};

import java.sql.*;
import java.math.BigDecimal;

public class 
	${className}ResultSet
{
	private ResultSet __resultSet = null;

	public ${className}ResultSet( ResultSet resultSet )
	{
		__resultSet = resultSet;
	}

	public final ResultSet getResultSet()
	{
		return __resultSet;
	}
	

	/**
	 * Done with current response (ResultSet), clears this instance, prior to reuse.
	 * 
	 * @throws SQLException
	 */
	public void close()
		throws SQLException
	{
		if( __resultSet != null )
		{
			__resultSet.close();
			__resultSet = null;
		}
	}

	public final boolean hasNext()
		throws SQLException
	{
		ResultSet rs = getResultSet();
		if( rs == null ) return false;
		boolean	success = rs.next();
		if( success )
		{
#foreach( $column in $columns )
			_${column.NameAsVariable} = rs.get${column.TypedMethod}( "${column.NameAsMethod}" );
#end
		}
		return success;
	}
	
	public int count()
	{
		int result = 0;
		try
		{
			ResultSet rs = getResultSet();
			int current = rs.getRow();
			if( rs.last() )
			{
				result = rs.getRow();
				if( current == 0 )
				{
					rs.beforeFirst();
				}
				else
				{
					rs.absolute( current );
				}
			}
				
		}
		catch( SQLException e )
		{
			e.printStackTrace();
		}
		return result;
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.NameAsVariable} = ${column.InitializerValue};

	public ${column.JavaType} get${column.NameAsMethod}()
	{
		return _${column.NameAsVariable};
	}	

#end
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
#foreach( $column in $columns )
		sb.append( "${column.NameAsMethod}: " );
		sb.append( get${column.NameAsMethod}() );
		sb.append( "\n" );
#end
		return sb.toString();
	}
}
