## Fado's INSERT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## conditions - conditions found in source SQL as List<fado.meta.Condition>

/**
  ${className}.java
  
  Generated by Fado's Select.vm (Velocity template).
**/

package ${packageName};

import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import fado.template.AbstractInsert;

public class 
	${className}
extends
	AbstractInsert
{
	public ${className}( Connection connection )
		throws Exception
	{
		super( connection );
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.Name} = ${column.InitializerValue};
#end

#foreach( $column in $columns )
	public void set${column.Name}( ${column.JavaType} ${column.Name} )
	{
		_${column.Name} = ${column.Name};
	}
	
	public ${column.JavaType} get${column.Name}()
	{
		return _${column.Name};
	}	

#end
	
	private static String _sql = null;

	@Override
	public String getSQL()
	{
		if( _sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
#foreach( $line in $sql )
			w.println( "$line" );
#end
			w.close();
			_sql = writer.toString();
		}
		return _sql;
	}

	public String getSQL2()
	{
		if( _sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
			w.println( "INSERT INTO LEGISLATIONINFO" );
			w.println( "( " );
			w.println( "	biennium, " );
			w.println( "	billid," );
			w.println( "	billnumber," );
			w.println( "	substituteversion," );
			w.println( "	engrossedversion," );
			w.println( "	shortLegislationType," );
			w.println( "	longLegislationType," );
			w.println( "	originalagency," );
			w.println( "	active " );
			w.println( ")" );
			w.println( "VALUES" );
			w.println( "( ?, ?, ?, ?, ?, ?, ?,  ?, ? );" );
			w.close();
			_sql = writer.toString();
		}
		return _sql;
	}
	
	public void setParameters( PreparedStatement prepared )
		throws SQLException
	{
#set( $nth = 0 )
#foreach( $column in $columns )
##
#set( $name = $column.getName() )
#set( $method = $column.getTypedMethod() )
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${name}() );
##
#end
	}
}
