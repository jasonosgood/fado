## Fado's INSERT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## date - Fado's timestamp

/**

${className}.java   ${date}
  
Generated by Fado's using Insert.vm (Velocity template). Original SQL:
    
#foreach( $line in $originalsql )
$line
#end

@see ${originalfile}
  
**/

package ${packageName};

import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.*;
import java.math.BigDecimal;

public class 
	${className}
{
	private Connection __connection = null;
	private PreparedStatement __prepared = null;

	public ${className}( Connection connection )
		throws Exception
	{
		__connection = connection;
	}

	protected final PreparedStatement getPreparedStatement()
		throws SQLException
	{
		if( __prepared == null )
		{
			String sql = getSQL();
			__prepared = __connection.prepareStatement( sql, Statement.RETURN_GENERATED_KEYS );
	
		}
		return __prepared;
	}


	protected boolean __executed = false;

	// TODO: Auto detect if row has key/identity column
	
	public final boolean execute()
		throws SQLException
	{
		__executed = true;
		PreparedStatement statement = getPreparedStatement();
		setParameters( statement );

		boolean success = statement.executeUpdate() > 0;
		if( success )
		{
			ResultSet keys = statement.getGeneratedKeys();
			keys.next();
			__identity = keys.getInt( 1 );
		}
		
		return success;
	}

	private long __identity = 0L;

	public long getIdentity()
	{
		return __identity;
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.NameAsVariable} = ${column.InitializerValue};
#end

#foreach( $column in $columns )
	public void set${column.NameAsMethod}( ${column.JavaType} ${column.NameAsVariable} )
	{
		_${column.NameAsVariable} = ${column.NameAsVariable};
	}
	
	public ${column.JavaType} get${column.NameAsMethod}()
	{
		return _${column.NameAsVariable};
	}	

#end
	
	private static String __sql = null;

	public String getSQL()
	{
		if( __sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
#foreach( $line in $sql )
			w.println( "$line" );
#end
			w.close();
			__sql = writer.toString();
		}
		return __sql;
	}

	public void setParameters( PreparedStatement prepared )
		throws SQLException
	{
#set( $nth = 0 )
#foreach( $column in $columns )
##
#set( $method = $column.getTypedMethod() )
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${column.NameAsMethod}() );
##
#end
	}
	
	public String toString()
	{
		String result = getSQL();
#foreach( $column in $columns )
		result = result.replaceFirst( "\\?", quotifyString( get${column.NameAsMethod}() ));
#end
		return result;
	}
	
	private String quotifyString( Object value )
	{
		if( value instanceof String )
		{
			return "'" + value.toString() + "'";
		}
		else
		{
			return value.toString();
		}
	}
}
