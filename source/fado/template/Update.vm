## Fado's UPDATE Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## conditions - conditions found in source SQL as List<fado.meta.Condition>
## date - Fado's timestamp

/**

${className}.java   ${date}
  
Generated using Fado's Update template. Original SQL:
    
#foreach( $line in $originalsql )
$line
#end

@see ${originalfile}
  
**/

package ${packageName};

import java.io.PrintWriter;
import java.io.StringWriter;
import java.sql.*;
import java.math.BigDecimal;

public class 
	${className}
{
	private Connection __connection = null;
	private PreparedStatement __prepared = null;
	
	public ${className}( Connection connection )
		throws Exception
	{
		__connection = connection;
	}

	private PreparedStatement getPreparedStatement()
		throws SQLException
	{
		if( __prepared == null )
		{
			String sql = getSQL();
			__prepared = __connection.prepareStatement( sql );
		}
		return __prepared;
	}

	public int execute()
		throws SQLException
	{
		PreparedStatement statement = getPreparedStatement();
		setParameters( statement );
		int rows = statement.executeUpdate();
		return rows;
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.NameAsVariable} = ${column.InitializerValue};
#end

#foreach( $column in $columns )
	public void set${column.NameAsMethod}( ${column.JavaType} ${column.NameAsVariable} )
	{
		_${column.NameAsVariable} = ${column.NameAsVariable};
	}
	
	public ${column.JavaType} get${column.NameAsMethod}()
	{
		return _${column.NameAsVariable};
	}	

#end

#foreach( $condition in $conditions )
##
#if( $condition.isComparison() )

	public ${condition.JavaType} _${condition.NameAsVariable}Param = $condition.getValueAsCode();
	
	public void set${condition.NameAsMethod}Param( ${condition.JavaType} ${condition.NameAsVariable} )
	{
		_${condition.NameAsVariable}Param = ${condition.NameAsVariable};
	}
	
	public ${condition.JavaType} get${condition.NameAsMethod}Param()
	{
		return _${condition.NameAsVariable}Param;
	}

#elseif( $condition.isLIKE() )

	public ${condition.JavaType} _${condition.NameAsVariable}Param = $condition.getValueAsCode();
	
	public void set${condition.NameAsMethod}Param( ${condition.JavaType} ${condition.NameAsVariable} )
	{
		_${condition.NameAsVariable}Param = ${condition.NameAsVariable};
	}
	
	public ${condition.JavaType} get${condition.NameAsMethod}Param()
	{
		return _${condition.NameAsVariable}Param;
	}

#elseif( $condition.isIN() )
	private ${condition.JavaType}[] _${condition.NameAsVariable}List = new ${condition.JavaType}[] { $condition.getValueAsCode() };
	private int _${condition.NameAsVariable}Count = 0;
	public void add${condition.NameAsMethod}Param( ${condition.JavaType} ${condition.NameAsVariable} )
	{
		if( _${condition.NameAsVariable}Count == _${condition.NameAsVariable}List.length )
		{
			throw new IndexOutOfBoundsException( "IN condition parameter array only has room for: " + _${condition.NameAsVariable}List.length );
		}
		int count = _${condition.NameAsVariable}Count;
		
		// Parameter array get filled to the right, so there are no holes
		for( int i = count; count < _${condition.NameAsVariable}List.length; count++ )
		{
			_${condition.NameAsVariable}List[i] = ${condition.NameAsVariable};
		}
		_${condition.NameAsVariable}Count++;
	}
	
	public ${condition.JavaType} get${condition.NameAsMethod}Param( int nth )
	{
		return _${condition.NameAsVariable}List[ nth ];
	}
	
#elseif( $condition.isBETWEEN() )

	public ${condition.JavaType} _${condition.NameAsVariable}LeftParam = $condition.getLeftAsCode();
	
	public void set${condition.NameAsMethod}LeftParam( ${condition.JavaType} ${condition.NameAsVariable} )
	{
		_${condition.NameAsVariable}LeftParam = ${condition.NameAsVariable};
	}
	
	public ${condition.JavaType} get${condition.NameAsMethod}LeftParam()
	{
		return _${condition.NameAsVariable}LeftParam;
	}

	public ${condition.JavaType} _${condition.NameAsVariable}RightParam = $condition.getRightAsCode();
	
	public void set${condition.NameAsMethod}RightParam( ${condition.JavaType} ${condition.NameAsVariable} )
	{
		_${condition.NameAsVariable}RightParam = ${condition.NameAsVariable};
	}
	
	public ${condition.JavaType} get${condition.NameAsMethod}RightParam()
	{
		return _${condition.NameAsVariable}RightParam;
	}
#end
#end
	
	private static String __sql = null;

	public String getSQL()
	{
		if( __sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
#foreach( $line in $sql )
			w.println( "$line" );
#end
			w.close();
			__sql = writer.toString();
		}
		return __sql;
	}

	public void setParameters( PreparedStatement prepared )
		throws SQLException
	{
#set( $nth = 0 )
#foreach( $column in $columns )
##
#set( $method = $column.getTypedMethod() )
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${column.NameAsMethod}() );
##
#end
#foreach( $condition in $conditions )
##
#if( $condition.isComparison() )
##
#set( $nth = $nth + 1 )
		prepared.set${condition.TypedMethod}( ${nth}, get${condition.NameAsMethod}Param() );
##
#elseif( $condition.isLIKE() )
##
#set( $nth = $nth + 1 )
		prepared.set${condition.TypedMethod}( ${nth}, get${condition.NameAsMethod}Param() );
##
#elseif( $condition.isIN() )
##
#set( $size = $condition.getValues().size() - 1 )
##
#foreach( $abc in [0..$size] )
#set( $nth = $nth + 1 )
		prepared.set${condition.TypedMethod}( ${nth}, get${condition.NameAsMethod}Param( ${abc} ));
#end
##
#elseif( $condition.isBETWEEN() )
##
#set( $nth = $nth + 1 )
		prepared.set${condition.TypedMethod}( ${nth}, get${condition.NameAsMethod}LeftParam() );
#set( $nth = $nth + 1 )
		prepared.set${condition.TypedMethod}( ${nth}, get${condition.NameAsMethod}RightParam() );
##
#end
#end
	}
	
	public String toString()
	{
		String result = getSQL();
#foreach( $column in $columns )
		result = result.replaceFirst( "\\?", quotifyString( get${column.NameAsMethod}() ));
#end
#foreach( $condition in $conditions )
##
#if( $condition.isIN() )
##
#set( $size = $condition.getValues().size() - 1 )
#foreach( $abc in [0..$size] )
		result = result.replaceFirst( "\\?", quotifyString( get${condition.NameAsMethod}Param( ${abc} )));
#end
##
#elseif( $condition.isBETWEEN() )
##
		result = result.replaceFirst( "\\?", quotifyString( get${condition.NameAsMethod}LeftParam() ));
		result = result.replaceFirst( "\\?", quotifyString( get${condition.NameAsMethod}RightParam() ));
#elseif( $condition.isComparison() || $condition.isLIKE() )
		result = result.replaceFirst( "\\?", quotifyString( get${condition.NameAsMethod}Param() ));
#end
#end
		return result;
	}
	
	private String quotifyString( Object value )
	{
		if( value instanceof String )
		{
			return "'" + value.toString() + "'";
		}
		else
		{
			return value.toString();
		}
	}
}
