## Fado's SELECT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## conditions - conditions found in source SQL as List<fado.meta.Condition>
## date - Fado's timestamp
/**

${className}.java   ${date}
  
Generated using Fado's Select template. Original SQL:
    
#foreach( $line in $originalsql )
$line
#end

@see ${originalfile}
  

**/

package ${packageName};

import java.io.StringWriter;
import java.io.PrintWriter;
import java.sql.*;

public class 
	${className}
{
	protected Connection __connection = null;

	public ${className}( Connection connection )
	{
		__connection = connection;
	}
	
	private int __scrolling = ResultSet.TYPE_SCROLL_SENSITIVE;
	
	public void setScrolling( int scrolling )
	{
		try
		{
			close();
		}
		catch( Exception e ) {}
		__scrolling = scrolling;
	}
	
	public int getScrolling()
	{
		return __scrolling;
	}
	
	private int __concurrency = ResultSet.CONCUR_UPDATABLE;
	
	public void setConcurrency( int concurrency )
	{
		try
		{
			close();
		}
		catch( Exception e ) {}
		__concurrency = concurrency;
	}
	
	public int getConcurrency()
	{
		return __concurrency;
	}
	
	protected PreparedStatement __prepared = null;

	protected final PreparedStatement getPreparedStatement()
		throws SQLException
	{
		if( __prepared == null )
		{
			String sql = getSQL();
			int scrolling = getScrolling();
			int concurrency = getConcurrency();
			__prepared = __connection.prepareStatement( sql, scrolling, concurrency );

		}
		return __prepared;
	}

	protected boolean __executed = false;
	
	public final boolean execute()
		throws SQLException
	{
		boolean success = false;
		if( !__executed )
		{
			__executed = true;
			PreparedStatement statement = getPreparedStatement();
			setParameters( statement );
			success = statement.execute();
			if( success )
			{
				__resultSet = statement.getResultSet();
			}
		}
		return success;
	}

	/**
	 * Done with current response (ResultSet), clears this instance, prior to reuse.
	 * 
	 * @throws SQLException
	 */
	public void close()
		throws SQLException
	{
		getNextRow( false );
		if( __resultSet != null )
		{
			__resultSet.close();
			__resultSet = null;
		}
		__executed = false;
		
	}

	protected ResultSet __resultSet = null;

	public final ResultSet getResultSet()
	{
		return __resultSet;
	}
	
	public final boolean next()
		throws SQLException
	{
		execute();
		
		boolean success = false;
		if( __resultSet != null )
		{
			success = __resultSet.next();
			getNextRow( success );

		}
		return success;
	}
	
	public int count()
	{
		int result = 0;
		try
		{
			execute();
			ResultSet rs = getResultSet();
			int current = rs.getRow();
			if( rs.last() )
			{
				result = rs.getRow();
				if( current == 0 )
				{
					rs.beforeFirst();
				}
				else
				{
					rs.absolute( current );
				}
			}
				
		}
		catch( SQLException e )
		{
			e.printStackTrace();
		}
		return result;
	}
	
	public void getNextRow( boolean success )
		throws SQLException
	{
		if( success )
		{
			ResultSet rs = getResultSet();
#foreach( $column in $columns )
			_${column.NameAsVariable} = rs.get${column.TypedMethod}( "${column.NameAsMethod}" );
#end
		}
		else
		{
#foreach( $column in $columns )
			_${column.NameAsVariable} = ${column.InitializerValue};
#end
		}
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.NameAsVariable} = ${column.InitializerValue};

	public void set${column.NameAsMethod}( ${column.JavaType} ${column.NameAsVariable} )
		throws SQLException
	{
		if( __inserting || __updating )
		{
			_${column.NameAsVariable} = ${column.NameAsVariable};
		}
		else
		{
			throw new SQLException( "ResultSet not updatable." );
		}
	}
	
	public ${column.JavaType} get${column.NameAsMethod}()
	{
		return _${column.NameAsVariable};
	}	

#end

	private boolean __inserting = false;
	
	/**
	 * Tries to start inserting mode. Throws SQLException if 
	 * 
	 * @throws SQLException
	 */
	public void startInsert()
		throws SQLException
	{
		execute();
		ResultSet rs = getResultSet();
		int concurrency = rs.getConcurrency();
		if( concurrency == ResultSet.CONCUR_UPDATABLE )
		{
			__inserting = true;
			_id = 0;
			_actionCode = null;
			_code = null;
			_description = null;
			_discoveredDate = null;
			_reaction = null;
			_sensitivityDescription = null;
			_severity = null;
			_severityDescription = null;
			_status = null;
			_type = null;
			_message_ID = 0;
			_patientKey_ID = 0;
		}
		else
		{
			throw new SQLException( "ResultSet not updatable." );
		}
	}
	
	public void finishInsert()
		throws SQLException
	{
		if( __inserting )
		{
			__inserting = false;
			ResultSet rs = getResultSet();
			rs.moveToInsertRow();
			rs.updateInt( "ID", _id );
			rs.updateString( "ActionCode", _actionCode );
			rs.updateString( "Code", _code );
			rs.updateString( "Description", _description );
			rs.updateTimestamp( "DiscoveredDate", _discoveredDate );
			rs.updateString( "Reaction", _reaction );
			rs.updateString( "SensitivityDescription", _sensitivityDescription );
			rs.updateString( "Severity", _severity );
			rs.updateString( "SeverityDescription", _severityDescription );
			rs.updateString( "Status", _status );
			rs.updateString( "Type", _type );
			rs.updateInt( "Message_ID", _message_ID );
			rs.updateInt( "PatientKey_ID", _patientKey_ID );
			rs.insertRow();
			rs.moveToCurrentRow();
			rs.next();
			getNextRow( true );
		}
		else
		{
			throw new SQLException( "call startInset() before finishInsert()" );
		}
	}
	
	
	private boolean __updating = false;
	
	public void startUpdating()
		throws SQLException
	{
		execute();
		ResultSet rs = getResultSet();
		int concurrency = rs.getConcurrency();
		if( concurrency == ResultSet.CONCUR_UPDATABLE )
		{
			__updating = true;
		}
		else
		{
			throw new SQLException( "ResultSet not updatable." );
		}
	}
	
	public void finishUpdating()
		throws SQLException
	{
		if( __updating )
		{
			__updating = false;
			ResultSet rs = getResultSet();
			rs.updateInt( "ID", _id );
			rs.updateString( "ActionCode", _actionCode );
			rs.updateString( "Code", _code );
			rs.updateString( "Description", _description );
			rs.updateTimestamp( "DiscoveredDate", _discoveredDate );
			rs.updateString( "Reaction", _reaction );
			rs.updateString( "SensitivityDescription", _sensitivityDescription );
			rs.updateString( "Severity", _severity );
			rs.updateString( "SeverityDescription", _severityDescription );
			rs.updateString( "Status", _status );
			rs.updateString( "Type", _type );
			rs.updateInt( "Message_ID", _message_ID );
			rs.updateInt( "PatientKey_ID", _patientKey_ID );
			rs.updateRow();
		}
		else
		{
			throw new SQLException( "call startInset() before finishInsert()" );
		}
	
	}



#foreach( $condition in $conditions )

#set( $type = $condition.getJavaType() )
#set( $name = $condition.getColumn() )
#set( $vari = $condition.getColumnAsVariable() )

#if( $condition.isComparison() )

	public ${type} _${vari}Param = $condition.getValueAsCode();
	
	public void set${name}Param( ${type} ${vari} )
	{
		_${vari}Param = ${vari};
	}
	
	public ${type} get${name}Param()
	{
		return _${vari}Param;
	}

#elseif( $condition.isIN() )
	private ${type}[] _${vari}List = new ${type}[] { $condition.getValueAsCode() };
	private int _${vari}Count = 0;
	public void add${name}Param( ${type} ${vari} )
	{
		if( _${vari}Count == _${vari}List.length )
		{
			throw new IndexOutOfBoundsException( "IN condition parameter array only has room for: " + _${vari}List.length );
		}
		int count = _${vari}Count;
		
		// Parameter array get filled to the right, so there are no holes
		for( int i = count; count < _${vari}List.length; count++ )
		{
			_${vari}List[i] = ${vari};
		}
		_${vari}Count++;
	}
	
	public ${type} get${name}Param( int nth )
	{
		return _${vari}List[ nth ];
	}
	
#elseif( $condition.isBETWEEN() )

    BETWEEN!

#elseif( $condition.isLIKE() )

    LIKE!

#end
#end

	private static String __sql = null;
	
	public String getSQL()
	{
		if( __sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
#foreach( $line in $sql )
			w.println( "$line" );
#end
			w.close();
			__sql = writer.toString();
		}
		return __sql;
	}
	
	protected void setParameters( PreparedStatement prepared )
		throws SQLException
	{
#set( $nth = 0 )
#foreach( $condition in $conditions )
##
#set( $type = $condition.getJavaType() )
#set( $name = $condition.getColumn() )
#set( $method = $condition.getTypedMethod() )
##
#if( $condition.isComparison() )
##
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${name}Param() );
##
#elseif( $condition.isIN() )
##
#set( $size = $condition.getValues().size() - 1 )
##
#foreach( $abc in [0..$size] )
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${name}Param( ${abc} ));
#end
##
#elseif( $condition.isBETWEEN() )

    BETWEEN!

#elseif( $condition.isLIKE() )

    LIKE!

#end
#end
	}

	public String toString()
	{
		String result = getSQL();
#foreach( $condition in $conditions )
#set( $name = $condition.getColumn() )
#if( $condition.isIN() )
#set( $size = $condition.getValues().size() - 1 )
#foreach( $abc in [0..$size] )
#set( $nth = $nth + 1 )
		result = result.replaceFirst( "\\?", quotifyString( get${name}Param( ${abc} )));
#end
#else
		result = result.replaceFirst( "\\?", quotifyString( get${name}Param() ));
#end
#end
		return result;
	}
	
	private String quotifyString( Object value )
	{
		if( value instanceof String )
		{
			return "'" + value.toString() + "'";
		}
		else
		{
			return value.toString();
		}
	}

}
