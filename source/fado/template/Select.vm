## Fado's SELECT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## conditions - conditions found in source SQL as List<fado.meta.Condition>

/**
  ${className}.java
  
  Generated by Fado's Select.vm (Velocity template).
**/

package ${packageName};

import java.io.StringWriter;
import java.io.PrintWriter;
import java.sql.*;
import fado.template.AbstractSelect;

public class 
	${className}
extends
	AbstractSelect
{
	public ${className}( Connection connection )
		throws Exception
	{
		super( connection );
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.AliasOrName} = ${column.InitializerValue};
#end
	
	public void updateValues( boolean success )
		throws SQLException
	{
		if( success )
		{
#foreach( $column in $columns )
			_${column.AliasOrName} = getResultSet().get${column.TypedMethod}( "${column.AliasOrName}" );
#end
		}
		else
		{
#foreach( $column in $columns )
			_${column.AliasOrName} = ${column.InitializerValue};
#end
		}
	}
	
#foreach( $column in $columns )
	public ${column.JavaType} get${column.AliasOrName}()
	{
		return _${column.AliasOrName};
	}	

#end

#foreach( $condition in $conditions )

#set( $type = $condition.getJavaType() )
#set( $name = $condition.getColumn() )

#if( $condition.isComparison() )

	public ${type} _${name}Param = $condition.getValueAsCode();
	
	public void set${name}Param( ${type} ${name} )
	{
		_${name}Param = ${name};
	}
	
	public ${type} get${name}Param()
	{
		return _${name}Param;
	}

#elseif( $condition.isIN() )
	private ${type}[] _${name}List = new ${type}[] { $condition.getValueAsCode() };
	private int _${name}Count = 0;
	public void add${name}Param( ${type} ${name} )
	{
		if( _${name}Count == _${name}List.length )
		{
			throw new IndexOutOfBoundsException( "IN condition parameter array only has room for: " + _${name}List.length );
		}
		int count = _${name}Count;
		
		// Parameter array get filled to the right, so there are no holes
		for( int i = count; count < _${name}List.length; count++ )
		{
			_${name}List[i] = ${name};
		}
		_${name}Count++;
	}
	
	public ${type} get${name}Param( int nth )
	{
		return _${name}List[ nth ];
	}
	
#elseif( $condition.isBETWEEN() )

    BETWEEN!

#elseif( $condition.isLIKE() )

    LIKE!

#end
#end

	private static String _sql = null;
	public String getSQL()
	{
		if( _sql == null )
		{
			StringWriter writer = new StringWriter();
			PrintWriter w = new PrintWriter( writer );
#foreach( $line in $sql )
			w.println( "$line" );
#end
			w.close();
			_sql = writer.toString();
		}
		return _sql;
	}
	
	@Override
	protected void setParameters( PreparedStatement prepared )
		throws SQLException
	{
#set( $nth = 0 )
#foreach( $condition in $conditions )
##
#set( $type = $condition.getJavaType() )
#set( $name = $condition.getColumn() )
#set( $method = $condition.getTypedMethod() )
##
#if( $condition.isComparison() )
##
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${name}Param() );
##
#elseif( $condition.isIN() )
##
#set( $size = $condition.getValues().size() - 1 )
##
#foreach( $abc in [0..$size] )
#set( $nth = $nth + 1 )
		prepared.set${method}( ${nth}, get${name}Param( ${abc} ));
#end
##
#elseif( $condition.isBETWEEN() )

    BETWEEN!

#elseif( $condition.isLIKE() )

    LIKE!

#end
#end
	}

}
