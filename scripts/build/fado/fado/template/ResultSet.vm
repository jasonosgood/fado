## Fado's SELECT Statement Template
## 
## Template Parameters:
## 
## packageName - target Java package name as String
## className - target Java class name as String
## sql - lines of retooled SQL statement as List<String>
## columns - columns found in source SQL as List<fado.meta.Column>
## date - Fado's timestamp
/**

${className}ResultSet.java   ${date}
  
Generated using Fado's ResultSet.vm template. Original SQL:
    
#foreach( $line in $originallines )
$line
#end

@see ${originalfile}
  

**/

package ${packageName};

import java.sql.*;
import java.math.BigDecimal;

public class 
	${className}ResultSet
{
	private ResultSet __resultSet = null;

	public ${className}ResultSet( ResultSet resultSet )
	{
		__resultSet = resultSet;
	}

	public final ResultSet getResultSet()
	{
		return __resultSet;
	}
	
	public boolean getSuccess()
	{
		return __resultSet != null;
	}
	
	/**
		Closes the contained ResultSet instance. Also closes contained Connection instance 
		created via a DataSource connection factory.
	**/
	public void close()
		throws SQLException
	{
		if( __resultSet != null )
		{
			__resultSet.close();
			__resultSet = null;
		}
		Connection connection = getConnection();
		if( connection != null )
		{
			connection.close();
		}
	}

	
	private Connection __connection = null;
	
	public void setConnection( Connection connection )
	{
		__connection = connection;
	}
	
	public Connection getConnection()
	{
		return __connection;
	}
	
	
	public final boolean hasNext()
		throws SQLException
	{
		ResultSet rs = getResultSet();
		if( rs == null ) return false;
		boolean	success = rs.next();
		if( success )
		{
#set( $nth = 0 )
#foreach( $column in $columns )
#set( $nth = $nth + 1 )
			_${column.NameAsVariable} = rs.get${column.TypedMethod}( ${nth} );
#if( $column.Nullable )
			_${column.NameAsVariable}_has = !rs.wasNull();
#end
#end
		}
		return success;
	}
	
	public int count()
	{
		int result = 0;
		try
		{
			ResultSet rs = getResultSet();
			int current = rs.getRow();
			if( rs.last() )
			{
				result = rs.getRow();
				if( current == 0 )
				{
					rs.beforeFirst();
				}
				else
				{
					rs.absolute( current );
				}
			}
				
		}
		catch( SQLException e )
		{
			e.printStackTrace();
		}
		return result;
	}
	
#foreach( $column in $columns )
	private ${column.JavaType} _${column.NameAsVariable} = ${column.InitializerValue};

	/** ${column.JavaDocText} **/
	public ${column.JavaType} get${column.NameAsMethod}()
	{
		return _${column.NameAsVariable};
	}	

#if( $column.Nullable )
	private boolean _${column.NameAsVariable}_has = false;
	
	/** returns true if ${column.JavaDocText} is non-null **/
	public boolean has${column.NameAsMethod}()
	{
		return _${column.NameAsVariable}_has;
	}	
	
#end	
#end

	public String toString()
	{
		if( getResultSet() == null )
		{
			return "No results";
		}
		StringBuilder sb = new StringBuilder();
#foreach( $column in $columns )
		sb.append( "${column.NameAsMethod}: " );
		sb.append( get${column.NameAsMethod}() );
		sb.append( "\n" );
#end
		return sb.toString();
	}
}
